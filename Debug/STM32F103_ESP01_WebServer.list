
STM32F103_ESP01_WebServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a94  08002a94  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a94  08002a94  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a98  08002a98  00012a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  08002af8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08002af8  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e93  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018cf  00000000  00000000  00027f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00029830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  00029f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fa3  00000000  00000000  0002a446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000900e  00000000  00000000  000413e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000820c1  00000000  00000000  0004a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f3c  00000000  00000000  000cc4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ce3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024a0 	.word	0x080024a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080024a0 	.word	0x080024a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b098      	sub	sp, #96	; 0x60
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000166:	f000 f8a7 	bl	80002b8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800016a:	4941      	ldr	r1, [pc, #260]	; (8000270 <ESP_Init+0x114>)
 800016c:	4841      	ldr	r0, [pc, #260]	; (8000274 <ESP_Init+0x118>)
 800016e:	f000 f9a5 	bl	80004bc <Uart_sendstring>

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 8000172:	493f      	ldr	r1, [pc, #252]	; (8000270 <ESP_Init+0x114>)
 8000174:	4840      	ldr	r0, [pc, #256]	; (8000278 <ESP_Init+0x11c>)
 8000176:	f000 f9a1 	bl	80004bc <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 800017a:	bf00      	nop
 800017c:	493c      	ldr	r1, [pc, #240]	; (8000270 <ESP_Init+0x114>)
 800017e:	483f      	ldr	r0, [pc, #252]	; (800027c <ESP_Init+0x120>)
 8000180:	f000 fa2e 	bl	80005e0 <Wait_for>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d0f8      	beq.n	800017c <ESP_Init+0x20>



	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 800018a:	4939      	ldr	r1, [pc, #228]	; (8000270 <ESP_Init+0x114>)
 800018c:	483c      	ldr	r0, [pc, #240]	; (8000280 <ESP_Init+0x124>)
 800018e:	f000 f995 	bl	80004bc <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000192:	bf00      	nop
 8000194:	4936      	ldr	r1, [pc, #216]	; (8000270 <ESP_Init+0x114>)
 8000196:	483b      	ldr	r0, [pc, #236]	; (8000284 <ESP_Init+0x128>)
 8000198:	f000 fa22 	bl	80005e0 <Wait_for>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f8      	beq.n	8000194 <ESP_Init+0x38>



	/********* AT+CWJAP="SSID","PASSWD" **********/

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80001a2:	f107 000c 	add.w	r0, r7, #12
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4937      	ldr	r1, [pc, #220]	; (8000288 <ESP_Init+0x12c>)
 80001ac:	f001 fcc6 	bl	8001b3c <siprintf>
	Uart_sendstring(data, wifi_uart);
 80001b0:	f107 030c 	add.w	r3, r7, #12
 80001b4:	492e      	ldr	r1, [pc, #184]	; (8000270 <ESP_Init+0x114>)
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 f980 	bl	80004bc <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 80001bc:	bf00      	nop
 80001be:	492c      	ldr	r1, [pc, #176]	; (8000270 <ESP_Init+0x114>)
 80001c0:	4832      	ldr	r0, [pc, #200]	; (800028c <ESP_Init+0x130>)
 80001c2:	f000 fa0d 	bl	80005e0 <Wait_for>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d0f8      	beq.n	80001be <ESP_Init+0x62>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	492f      	ldr	r1, [pc, #188]	; (8000290 <ESP_Init+0x134>)
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fcb1 	bl	8001b3c <siprintf>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80001da:	4925      	ldr	r1, [pc, #148]	; (8000270 <ESP_Init+0x114>)
 80001dc:	482d      	ldr	r0, [pc, #180]	; (8000294 <ESP_Init+0x138>)
 80001de:	f000 f96d 	bl	80004bc <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80001e2:	bf00      	nop
 80001e4:	4922      	ldr	r1, [pc, #136]	; (8000270 <ESP_Init+0x114>)
 80001e6:	482c      	ldr	r0, [pc, #176]	; (8000298 <ESP_Init+0x13c>)
 80001e8:	f000 f9fa 	bl	80005e0 <Wait_for>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f8      	beq.n	80001e4 <ESP_Init+0x88>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80001f2:	bf00      	nop
 80001f4:	4a1e      	ldr	r2, [pc, #120]	; (8000270 <ESP_Init+0x114>)
 80001f6:	4929      	ldr	r1, [pc, #164]	; (800029c <ESP_Init+0x140>)
 80001f8:	4829      	ldr	r0, [pc, #164]	; (80002a0 <ESP_Init+0x144>)
 80001fa:	f000 f977 	bl	80004ec <Copy_upto>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f7      	beq.n	80001f4 <ESP_Init+0x98>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000204:	bf00      	nop
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <ESP_Init+0x114>)
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <ESP_Init+0x148>)
 800020a:	f000 f9e9 	bl	80005e0 <Wait_for>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f8      	beq.n	8000206 <ESP_Init+0xaa>
	int len = strlen (buffer);
 8000214:	4821      	ldr	r0, [pc, #132]	; (800029c <ESP_Init+0x140>)
 8000216:	f7ff ff99 	bl	800014c <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 800021e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000220:	3b01      	subs	r3, #1
 8000222:	4a1e      	ldr	r2, [pc, #120]	; (800029c <ESP_Init+0x140>)
 8000224:	2100      	movs	r1, #0
 8000226:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 8000228:	f107 030c 	add.w	r3, r7, #12
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <ESP_Init+0x140>)
 800022e:	491e      	ldr	r1, [pc, #120]	; (80002a8 <ESP_Init+0x14c>)
 8000230:	4618      	mov	r0, r3
 8000232:	f001 fc83 	bl	8001b3c <siprintf>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000236:	490e      	ldr	r1, [pc, #56]	; (8000270 <ESP_Init+0x114>)
 8000238:	481c      	ldr	r0, [pc, #112]	; (80002ac <ESP_Init+0x150>)
 800023a:	f000 f93f 	bl	80004bc <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 800023e:	bf00      	nop
 8000240:	490b      	ldr	r1, [pc, #44]	; (8000270 <ESP_Init+0x114>)
 8000242:	481b      	ldr	r0, [pc, #108]	; (80002b0 <ESP_Init+0x154>)
 8000244:	f000 f9cc 	bl	80005e0 <Wait_for>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f8      	beq.n	8000240 <ESP_Init+0xe4>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <ESP_Init+0x114>)
 8000250:	4818      	ldr	r0, [pc, #96]	; (80002b4 <ESP_Init+0x158>)
 8000252:	f000 f933 	bl	80004bc <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000256:	bf00      	nop
 8000258:	4905      	ldr	r1, [pc, #20]	; (8000270 <ESP_Init+0x114>)
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <ESP_Init+0x148>)
 800025c:	f000 f9c0 	bl	80005e0 <Wait_for>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f8      	beq.n	8000258 <ESP_Init+0xfc>


}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3760      	adds	r7, #96	; 0x60
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200001bc 	.word	0x200001bc
 8000274:	080028bc 	.word	0x080028bc
 8000278:	080028c8 	.word	0x080028c8
 800027c:	080028d0 	.word	0x080028d0
 8000280:	080028dc 	.word	0x080028dc
 8000284:	080028ec 	.word	0x080028ec
 8000288:	08002904 	.word	0x08002904
 800028c:	0800291c 	.word	0x0800291c
 8000290:	08002930 	.word	0x08002930
 8000294:	08002944 	.word	0x08002944
 8000298:	08002950 	.word	0x08002950
 800029c:	20000078 	.word	0x20000078
 80002a0:	08002960 	.word	0x08002960
 80002a4:	08002964 	.word	0x08002964
 80002a8:	0800296c 	.word	0x0800296c
 80002ac:	0800297c 	.word	0x0800297c
 80002b0:	0800298c 	.word	0x0800298c
 80002b4:	080029a4 	.word	0x080029a4

080002b8 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <Ringbuf_init+0x44>)
 80002be:	4a10      	ldr	r2, [pc, #64]	; (8000300 <Ringbuf_init+0x48>)
 80002c0:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <Ringbuf_init+0x4c>)
 80002c4:	4a10      	ldr	r2, [pc, #64]	; (8000308 <Ringbuf_init+0x50>)
 80002c6:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <Ringbuf_init+0x54>)
 80002ca:	4a11      	ldr	r2, [pc, #68]	; (8000310 <Ringbuf_init+0x58>)
 80002cc:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <Ringbuf_init+0x5c>)
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <Ringbuf_init+0x60>)
 80002d2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <Ringbuf_init+0x64>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	695a      	ldr	r2, [r3, #20]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <Ringbuf_init+0x64>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f042 0201 	orr.w	r2, r2, #1
 80002e2:	615a      	str	r2, [r3, #20]


  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <Ringbuf_init+0x64>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <Ringbuf_init+0x64>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f042 0220 	orr.w	r2, r2, #32
 80002f2:	60da      	str	r2, [r3, #12]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	200001ac 	.word	0x200001ac
 8000300:	2000008c 	.word	0x2000008c
 8000304:	200001b0 	.word	0x200001b0
 8000308:	200000d4 	.word	0x200000d4
 800030c:	200001b4 	.word	0x200001b4
 8000310:	2000011c 	.word	0x2000011c
 8000314:	200001b8 	.word	0x200001b8
 8000318:	20000164 	.word	0x20000164
 800031c:	200001bc 	.word	0x200001bc

08000320 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000330:	3301      	adds	r3, #1
 8000332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000336:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	429a      	cmp	r2, r3
 8000340:	d007      	beq.n	8000352 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	79f9      	ldrb	r1, [r7, #7]
 800034a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <Uart_peek>:

}


int Uart_peek(UART_HandleTypeDef *uart)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <Uart_peek+0x44>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d111      	bne.n	8000390 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <Uart_peek+0x48>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <Uart_peek+0x48>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000378:	429a      	cmp	r2, r3
 800037a:	d102      	bne.n	8000382 <Uart_peek+0x26>
		  {
		    return -1;
 800037c:	f04f 33ff 	mov.w	r3, #4294967295
 8000380:	e008      	b.n	8000394 <Uart_peek+0x38>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <Uart_peek+0x48>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <Uart_peek+0x48>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	e001      	b.n	8000394 <Uart_peek+0x38>
		  }
	}



	return -1;
 8000390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200001bc 	.word	0x200001bc
 80003a4:	200001ac 	.word	0x200001ac

080003a8 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <Uart_read+0x58>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d11c      	bne.n	80003f2 <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <Uart_read+0x5c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <Uart_read+0x5c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d102      	bne.n	80003ce <Uart_read+0x26>
		  {
		    return -1;
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e013      	b.n	80003f6 <Uart_read+0x4e>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <Uart_read+0x5c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <Uart_read+0x5c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d8:	5cd3      	ldrb	r3, [r2, r3]
 80003da:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <Uart_read+0x5c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <Uart_read+0x5c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80003ec:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <Uart_read+0x4e>
		  }
	}


	else return -1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	200001bc 	.word	0x200001bc
 8000404:	200001ac 	.word	0x200001ac

08000408 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db25      	blt.n	8000464 <Uart_write+0x5c>
	{
		if (uart == device_uart){
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <Uart_write+0x68>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d121      	bne.n	8000464 <Uart_write+0x5c>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <Uart_write+0x6c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000426:	3301      	adds	r3, #1
 8000428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800042c:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 800042e:	bf00      	nop
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <Uart_write+0x6c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	429a      	cmp	r2, r3
 800043a:	d0f9      	beq.n	8000430 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <Uart_write+0x6c>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <Uart_write+0x6c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	b2c9      	uxtb	r1, r1
 800044a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <Uart_write+0x6c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <Uart_write+0x68>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <Uart_write+0x68>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000462:	60da      	str	r2, [r3, #12]
		}

	}
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	200001bc 	.word	0x200001bc
 8000474:	200001b0 	.word	0x200001b0

08000478 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <IsDataAvailable+0x3c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d10e      	bne.n	80004a6 <IsDataAvailable+0x2e>
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <IsDataAvailable+0x40>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <IsDataAvailable+0x40>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000496:	b29b      	uxth	r3, r3
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b29b      	uxth	r3, r3
 800049c:	3340      	adds	r3, #64	; 0x40
 800049e:	b29b      	uxth	r3, r3
 80004a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004a4:	e001      	b.n	80004aa <IsDataAvailable+0x32>

	return -1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	200001bc 	.word	0x200001bc
 80004b8:	200001ac 	.word	0x200001ac

080004bc <Uart_sendstring>:
	}
	return 1;
}

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80004c6:	e007      	b.n	80004d8 <Uart_sendstring+0x1c>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	6839      	ldr	r1, [r7, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff98 	bl	8000408 <Uart_write>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1f3      	bne.n	80004c8 <Uart_sendstring+0xc>
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80004fc:	68f8      	ldr	r0, [r7, #12]
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 800050a:	bf00      	nop
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ffb3 	bl	8000478 <IsDataAvailable>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000518:	e01c      	b.n	8000554 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800051a:	4b30      	ldr	r3, [pc, #192]	; (80005dc <Copy_upto+0xf0>)
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <Copy_upto+0xf0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	68b8      	ldr	r0, [r7, #8]
 8000528:	4403      	add	r3, r0
 800052a:	5c8a      	ldrb	r2, [r1, r2]
 800052c:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <Copy_upto+0xf0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	4b29      	ldr	r3, [pc, #164]	; (80005dc <Copy_upto+0xf0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800053e:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000546:	bf00      	nop
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ff95 	bl	8000478 <IsDataAvailable>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff ff01 	bl	800035c <Uart_peek>
 800055a:	4601      	mov	r1, r0
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4299      	cmp	r1, r3
 8000566:	d1d8      	bne.n	800051a <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000568:	e01b      	b.n	80005a2 <Copy_upto+0xb6>
	{
		so_far++;
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ff19 	bl	80003a8 <Uart_read>
 8000576:	4601      	mov	r1, r0
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	61ba      	str	r2, [r7, #24]
 800057e:	461a      	mov	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4413      	add	r3, r2
 8000584:	b2ca      	uxtb	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000588:	69fa      	ldr	r2, [r7, #28]
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	429a      	cmp	r2, r3
 800058e:	d101      	bne.n	8000594 <Copy_upto+0xa8>
 8000590:	2301      	movs	r3, #1
 8000592:	e01f      	b.n	80005d4 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8000594:	bf00      	nop
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff6e 	bl	8000478 <IsDataAvailable>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f9      	beq.n	8000596 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff feda 	bl	800035c <Uart_peek>
 80005a8:	4601      	mov	r1, r0
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4299      	cmp	r1, r3
 80005b4:	d0d9      	beq.n	800056a <Copy_upto+0x7e>
	}

	if (so_far != len)
 80005b6:	69fa      	ldr	r2, [r7, #28]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d002      	beq.n	80005c4 <Copy_upto+0xd8>
	{
		so_far = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
		goto again;
 80005c2:	e7a2      	b.n	800050a <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d101      	bne.n	80005d0 <Copy_upto+0xe4>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e001      	b.n	80005d4 <Copy_upto+0xe8>
	else return -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295

}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200001ac 	.word	0x200001ac

080005e0 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff fdac 	bl	800014c <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 80005f8:	bf00      	nop
 80005fa:	6838      	ldr	r0, [r7, #0]
 80005fc:	f7ff ff3c 	bl	8000478 <IsDataAvailable>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <Wait_for+0x1a>
	if (uart == device_uart)
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	4a23      	ldr	r2, [pc, #140]	; (8000698 <Wait_for+0xb8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d127      	bne.n	800065e <Wait_for+0x7e>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800060e:	e008      	b.n	8000622 <Wait_for+0x42>
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <Wait_for+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <Wait_for+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000620:	645a      	str	r2, [r3, #68]	; 0x44
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f7ff fe9a 	bl	800035c <Uart_peek>
 8000628:	4601      	mov	r1, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4299      	cmp	r1, r3
 8000634:	d1ec      	bne.n	8000610 <Wait_for+0x30>

	while (Uart_peek(uart) == string [so_far])
 8000636:	e012      	b.n	800065e <Wait_for+0x7e>
	{
		so_far++;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f7ff feb2 	bl	80003a8 <Uart_read>
		if (so_far == len) return 1;
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	429a      	cmp	r2, r3
 800064a:	d101      	bne.n	8000650 <Wait_for+0x70>
 800064c:	2301      	movs	r3, #1
 800064e:	e01f      	b.n	8000690 <Wait_for+0xb0>
		while (!IsDataAvailable(uart));
 8000650:	bf00      	nop
 8000652:	6838      	ldr	r0, [r7, #0]
 8000654:	f7ff ff10 	bl	8000478 <IsDataAvailable>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <Wait_for+0x72>
	while (Uart_peek(uart) == string [so_far])
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	f7ff fe7c 	bl	800035c <Uart_peek>
 8000664:	4601      	mov	r1, r0
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4299      	cmp	r1, r3
 8000670:	d0e2      	beq.n	8000638 <Wait_for+0x58>
	}

	if (so_far != len)
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	429a      	cmp	r2, r3
 8000678:	d002      	beq.n	8000680 <Wait_for+0xa0>
	{
		so_far = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
		goto again;
 800067e:	e7bb      	b.n	80005f8 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	429a      	cmp	r2, r3
 8000686:	d101      	bne.n	800068c <Wait_for+0xac>
 8000688:	2301      	movs	r3, #1
 800068a:	e001      	b.n	8000690 <Wait_for+0xb0>
	else return -1;
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200001bc 	.word	0x200001bc
 800069c:	200001ac 	.word	0x200001ac

080006a0 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	f003 0320 	and.w	r3, r3, #32
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d017      	beq.n	80006f2 <Uart_isr+0x52>
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d012      	beq.n	80006f2 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <Uart_isr+0xc0>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d138      	bne.n	8000754 <Uart_isr+0xb4>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <Uart_isr+0xc4>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fe18 	bl	8000320 <store_char>
        }


        return;
 80006f0:	e030      	b.n	8000754 <Uart_isr+0xb4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d02e      	beq.n	800075a <Uart_isr+0xba>
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	2b00      	cmp	r3, #0
 8000704:	d029      	beq.n	800075a <Uart_isr+0xba>
    {
    	if (huart == device_uart){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a15      	ldr	r2, [pc, #84]	; (8000760 <Uart_isr+0xc0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d124      	bne.n	8000758 <Uart_isr+0xb8>
    	if(tx_buffer1.head == tx_buffer1.tail)
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <Uart_isr+0xc8>)
 8000710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <Uart_isr+0xc8>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	429a      	cmp	r2, r3
 8000718:	d108      	bne.n	800072c <Uart_isr+0x8c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000728:	60da      	str	r2, [r3, #12]

    	    }
    	}


    	return;
 800072a:	e015      	b.n	8000758 <Uart_isr+0xb8>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <Uart_isr+0xc8>)
 800072e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <Uart_isr+0xc8>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <Uart_isr+0xc8>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	3301      	adds	r3, #1
 800073c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <Uart_isr+0xc8>)
 8000742:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	605a      	str	r2, [r3, #4]
    	return;
 8000752:	e001      	b.n	8000758 <Uart_isr+0xb8>
        return;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <Uart_isr+0xba>
    	return;
 8000758:	bf00      	nop
    }
}
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001bc 	.word	0x200001bc
 8000764:	200001ac 	.word	0x200001ac
 8000768:	200000d4 	.word	0x200000d4

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 f9ea 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f80e 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f87c 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f850 	bl	8000820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("ANM2", "anm157523");
 8000780:	4902      	ldr	r1, [pc, #8]	; (800078c <main+0x20>)
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <main+0x24>)
 8000784:	f7ff fcea 	bl	800015c <ESP_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x1c>
 800078a:	bf00      	nop
 800078c:	08002a20 	.word	0x08002a20
 8000790:	08002a2c 	.word	0x08002a2c

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2228      	movs	r2, #40	; 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f9ea 	bl	8001b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fcbf 	bl	8001160 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007e8:	f000 f890 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ff2c 	bl	8001664 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000812:	f000 f87b 	bl	800090c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3740      	adds	r7, #64	; 0x40
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f001 f892 	bl	8001980 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f853 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001bc 	.word	0x200001bc
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_GPIO_Init+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <MX_GPIO_Init+0x90>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_GPIO_Init+0x90>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_GPIO_Init+0x90>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <MX_GPIO_Init+0x90>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_GPIO_Init+0x90>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_GPIO_Init+0x90>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <MX_GPIO_Init+0x90>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_GPIO_Init+0x90>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0x94>)
 80008d8:	f000 fc2a 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x94>)
 80008f6:	f000 fa97 	bl	8000e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	40011000 	.word	0x40011000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <HAL_MspInit+0x5c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_MspInit+0x5c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x5c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x5c>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_MspInit+0x60>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_MspInit+0x60>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	40021000 	.word	0x40021000
 8000978:	40010000 	.word	0x40010000

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <HAL_UART_MspInit+0x98>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d137      	bne.n	8000a0c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 800099e:	69db      	ldr	r3, [r3, #28]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a6:	61d3      	str	r3, [r2, #28]
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009cc:	2304      	movs	r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_UART_MspInit+0xa0>)
 80009e0:	f000 fa22 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e4:	2308      	movs	r3, #8
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_UART_MspInit+0xa0>)
 80009f8:	f000 fa16 	bl	8000e28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2026      	movs	r0, #38	; 0x26
 8000a02:	f000 f9da 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a06:	2026      	movs	r0, #38	; 0x26
 8000a08:	f000 f9f3 	bl	8000df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 f8b5 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <USART2_IRQHandler+0x10>)
 8000a76:	f7ff fe13 	bl	80006a0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001bc 	.word	0x200001bc

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f001 f86a 	bl	8001b8c <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20005000 	.word	0x20005000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000204 	.word	0x20000204
 8000aec:	20000358 	.word	0x20000358

08000af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff fff8 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b02:	490c      	ldr	r1, [pc, #48]	; (8000b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b18:	4c09      	ldr	r4, [pc, #36]	; (8000b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 f837 	bl	8001b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fe1f 	bl	800076c <main>
  bx lr
 8000b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b38:	08002a9c 	.word	0x08002a9c
  ldr r2, =_sbss
 8000b3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b40:	20000354 	.word	0x20000354

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f923 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fed8 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f93b 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f903 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x20>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_IncTick+0x20>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000208 	.word	0x20000208

08000bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <HAL_GetTick+0x10>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000208 	.word	0x20000208

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <__NVIC_EnableIRQ+0x34>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff90 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff2d 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff42 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff35 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa2 	bl	8000d60 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	; (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcdc 	bl	8000bf8 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcd8 	bl	8000bf8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fcc8 	bl	8000bf8 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fcc4 	bl	8000bf8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fc7d 	bl	8000bf8 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc79 	bl	8000bf8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc5c 	bl	8000bf8 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc58 	bl	8000bf8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fc3c 	bl	8000bf8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc38 	bl	8000bf8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 face 	bl	8001944 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc22 	bl	8000bf8 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc1e 	bl	8000bf8 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fbdf 	bl	8000bf8 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fbdb 	bl	8000bf8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb8f 	bl	8000bf8 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb8b 	bl	8000bf8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb79 	bl	8000bf8 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb75 	bl	8000bf8 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb49 	bl	8000bf8 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fb45 	bl	8000bf8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb19 	bl	8000bf8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb15 	bl	8000bf8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb02 	bl	8000bf8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fafe 	bl	8000bf8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa50 	bl	8000bf8 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa4c 	bl	8000bf8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f9ae 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08002a34 	.word	0x08002a34
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x30>
 8001862:	2b08      	cmp	r3, #8
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x36>
 8001866:	e027      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800186a:	613b      	str	r3, [r7, #16]
      break;
 800186c:	e027      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0c9b      	lsrs	r3, r3, #18
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d010      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0c5b      	lsrs	r3, r3, #17
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e004      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	613b      	str	r3, [r7, #16]
      break;
 80018b6:	e002      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018be:	693b      	ldr	r3, [r7, #16]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	007a1200 	.word	0x007a1200
 80018d4:	08002a4c 	.word	0x08002a4c
 80018d8:	08002a5c 	.word	0x08002a5c
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	08002a44 	.word	0x08002a44

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffde 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0adb      	lsrs	r3, r3, #11
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	08002a44 	.word	0x08002a44

08001944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <RCC_Delay+0x34>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <RCC_Delay+0x38>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001960:	bf00      	nop
  }
  while (Delay --);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <RCC_Delay+0x1c>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000000 	.word	0x20000000
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e042      	b.n	8001a18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe ffe8 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f82b 	bl	8001a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a5a:	f023 030c 	bic.w	r3, r3, #12
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <UART_SetConfig+0x114>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d103      	bne.n	8001a90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a88:	f7ff ff48 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	e002      	b.n	8001a96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a90:	f7ff ff30 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8001a94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009a      	lsls	r2, r3, #2
 8001aa0:	441a      	add	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <UART_SetConfig+0x118>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	0119      	lsls	r1, r3, #4
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	441a      	add	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <UART_SetConfig+0x118>)
 8001ace:	fba3 0302 	umull	r0, r3, r3, r2
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	fb00 f303 	mul.w	r3, r0, r3
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	3332      	adds	r3, #50	; 0x32
 8001ae0:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <UART_SetConfig+0x118>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aec:	4419      	add	r1, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <UART_SetConfig+0x118>)
 8001b06:	fba3 0302 	umull	r0, r3, r3, r2
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2064      	movs	r0, #100	; 0x64
 8001b0e:	fb00 f303 	mul.w	r3, r0, r3
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	3332      	adds	r3, #50	; 0x32
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <UART_SetConfig+0x118>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	440a      	add	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40013800 	.word	0x40013800
 8001b38:	51eb851f 	.word	0x51eb851f

08001b3c <siprintf>:
 8001b3c:	b40e      	push	{r1, r2, r3}
 8001b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b42:	b500      	push	{lr}
 8001b44:	b09c      	sub	sp, #112	; 0x70
 8001b46:	ab1d      	add	r3, sp, #116	; 0x74
 8001b48:	9002      	str	r0, [sp, #8]
 8001b4a:	9006      	str	r0, [sp, #24]
 8001b4c:	9107      	str	r1, [sp, #28]
 8001b4e:	9104      	str	r1, [sp, #16]
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <siprintf+0x38>)
 8001b52:	4909      	ldr	r1, [pc, #36]	; (8001b78 <siprintf+0x3c>)
 8001b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b58:	9105      	str	r1, [sp, #20]
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	a902      	add	r1, sp, #8
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	f000 f98e 	bl	8001e80 <_svfiprintf_r>
 8001b64:	2200      	movs	r2, #0
 8001b66:	9b02      	ldr	r3, [sp, #8]
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	b01c      	add	sp, #112	; 0x70
 8001b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b70:	b003      	add	sp, #12
 8001b72:	4770      	bx	lr
 8001b74:	20000058 	.word	0x20000058
 8001b78:	ffff0208 	.word	0xffff0208

08001b7c <memset>:
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4402      	add	r2, r0
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d100      	bne.n	8001b86 <memset+0xa>
 8001b84:	4770      	bx	lr
 8001b86:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8a:	e7f9      	b.n	8001b80 <memset+0x4>

08001b8c <__errno>:
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <__errno+0x8>)
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000058 	.word	0x20000058

08001b98 <__libc_init_array>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	4d0c      	ldr	r5, [pc, #48]	; (8001bd0 <__libc_init_array+0x38>)
 8001b9e:	4c0d      	ldr	r4, [pc, #52]	; (8001bd4 <__libc_init_array+0x3c>)
 8001ba0:	1b64      	subs	r4, r4, r5
 8001ba2:	10a4      	asrs	r4, r4, #2
 8001ba4:	42a6      	cmp	r6, r4
 8001ba6:	d109      	bne.n	8001bbc <__libc_init_array+0x24>
 8001ba8:	f000 fc7a 	bl	80024a0 <_init>
 8001bac:	2600      	movs	r6, #0
 8001bae:	4d0a      	ldr	r5, [pc, #40]	; (8001bd8 <__libc_init_array+0x40>)
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <__libc_init_array+0x44>)
 8001bb2:	1b64      	subs	r4, r4, r5
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	42a6      	cmp	r6, r4
 8001bb8:	d105      	bne.n	8001bc6 <__libc_init_array+0x2e>
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc0:	4798      	blx	r3
 8001bc2:	3601      	adds	r6, #1
 8001bc4:	e7ee      	b.n	8001ba4 <__libc_init_array+0xc>
 8001bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bca:	4798      	blx	r3
 8001bcc:	3601      	adds	r6, #1
 8001bce:	e7f2      	b.n	8001bb6 <__libc_init_array+0x1e>
 8001bd0:	08002a94 	.word	0x08002a94
 8001bd4:	08002a94 	.word	0x08002a94
 8001bd8:	08002a94 	.word	0x08002a94
 8001bdc:	08002a98 	.word	0x08002a98

08001be0 <__retarget_lock_acquire_recursive>:
 8001be0:	4770      	bx	lr

08001be2 <__retarget_lock_release_recursive>:
 8001be2:	4770      	bx	lr

08001be4 <_free_r>:
 8001be4:	b538      	push	{r3, r4, r5, lr}
 8001be6:	4605      	mov	r5, r0
 8001be8:	2900      	cmp	r1, #0
 8001bea:	d040      	beq.n	8001c6e <_free_r+0x8a>
 8001bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bf0:	1f0c      	subs	r4, r1, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bfb8      	it	lt
 8001bf6:	18e4      	addlt	r4, r4, r3
 8001bf8:	f000 f8dc 	bl	8001db4 <__malloc_lock>
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <_free_r+0x8c>)
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	b933      	cbnz	r3, 8001c10 <_free_r+0x2c>
 8001c02:	6063      	str	r3, [r4, #4]
 8001c04:	6014      	str	r4, [r2, #0]
 8001c06:	4628      	mov	r0, r5
 8001c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c0c:	f000 b8d8 	b.w	8001dc0 <__malloc_unlock>
 8001c10:	42a3      	cmp	r3, r4
 8001c12:	d908      	bls.n	8001c26 <_free_r+0x42>
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	1821      	adds	r1, r4, r0
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	bf01      	itttt	eq
 8001c1c:	6819      	ldreq	r1, [r3, #0]
 8001c1e:	685b      	ldreq	r3, [r3, #4]
 8001c20:	1809      	addeq	r1, r1, r0
 8001c22:	6021      	streq	r1, [r4, #0]
 8001c24:	e7ed      	b.n	8001c02 <_free_r+0x1e>
 8001c26:	461a      	mov	r2, r3
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	b10b      	cbz	r3, 8001c30 <_free_r+0x4c>
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d9fa      	bls.n	8001c26 <_free_r+0x42>
 8001c30:	6811      	ldr	r1, [r2, #0]
 8001c32:	1850      	adds	r0, r2, r1
 8001c34:	42a0      	cmp	r0, r4
 8001c36:	d10b      	bne.n	8001c50 <_free_r+0x6c>
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	4401      	add	r1, r0
 8001c3c:	1850      	adds	r0, r2, r1
 8001c3e:	4283      	cmp	r3, r0
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	d1e0      	bne.n	8001c06 <_free_r+0x22>
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4408      	add	r0, r1
 8001c4a:	6010      	str	r0, [r2, #0]
 8001c4c:	6053      	str	r3, [r2, #4]
 8001c4e:	e7da      	b.n	8001c06 <_free_r+0x22>
 8001c50:	d902      	bls.n	8001c58 <_free_r+0x74>
 8001c52:	230c      	movs	r3, #12
 8001c54:	602b      	str	r3, [r5, #0]
 8001c56:	e7d6      	b.n	8001c06 <_free_r+0x22>
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	1821      	adds	r1, r4, r0
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	bf01      	itttt	eq
 8001c60:	6819      	ldreq	r1, [r3, #0]
 8001c62:	685b      	ldreq	r3, [r3, #4]
 8001c64:	1809      	addeq	r1, r1, r0
 8001c66:	6021      	streq	r1, [r4, #0]
 8001c68:	6063      	str	r3, [r4, #4]
 8001c6a:	6054      	str	r4, [r2, #4]
 8001c6c:	e7cb      	b.n	8001c06 <_free_r+0x22>
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
 8001c70:	2000034c 	.word	0x2000034c

08001c74 <sbrk_aligned>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	4e0e      	ldr	r6, [pc, #56]	; (8001cb0 <sbrk_aligned+0x3c>)
 8001c78:	460c      	mov	r4, r1
 8001c7a:	6831      	ldr	r1, [r6, #0]
 8001c7c:	4605      	mov	r5, r0
 8001c7e:	b911      	cbnz	r1, 8001c86 <sbrk_aligned+0x12>
 8001c80:	f000 fbaa 	bl	80023d8 <_sbrk_r>
 8001c84:	6030      	str	r0, [r6, #0]
 8001c86:	4621      	mov	r1, r4
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f000 fba5 	bl	80023d8 <_sbrk_r>
 8001c8e:	1c43      	adds	r3, r0, #1
 8001c90:	d00a      	beq.n	8001ca8 <sbrk_aligned+0x34>
 8001c92:	1cc4      	adds	r4, r0, #3
 8001c94:	f024 0403 	bic.w	r4, r4, #3
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d007      	beq.n	8001cac <sbrk_aligned+0x38>
 8001c9c:	1a21      	subs	r1, r4, r0
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f000 fb9a 	bl	80023d8 <_sbrk_r>
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	d101      	bne.n	8001cac <sbrk_aligned+0x38>
 8001ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
 8001cb0:	20000350 	.word	0x20000350

08001cb4 <_malloc_r>:
 8001cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cb8:	1ccd      	adds	r5, r1, #3
 8001cba:	f025 0503 	bic.w	r5, r5, #3
 8001cbe:	3508      	adds	r5, #8
 8001cc0:	2d0c      	cmp	r5, #12
 8001cc2:	bf38      	it	cc
 8001cc4:	250c      	movcc	r5, #12
 8001cc6:	2d00      	cmp	r5, #0
 8001cc8:	4607      	mov	r7, r0
 8001cca:	db01      	blt.n	8001cd0 <_malloc_r+0x1c>
 8001ccc:	42a9      	cmp	r1, r5
 8001cce:	d905      	bls.n	8001cdc <_malloc_r+0x28>
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001db0 <_malloc_r+0xfc>
 8001ce0:	f000 f868 	bl	8001db4 <__malloc_lock>
 8001ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ce8:	461c      	mov	r4, r3
 8001cea:	bb5c      	cbnz	r4, 8001d44 <_malloc_r+0x90>
 8001cec:	4629      	mov	r1, r5
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f7ff ffc0 	bl	8001c74 <sbrk_aligned>
 8001cf4:	1c43      	adds	r3, r0, #1
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	d155      	bne.n	8001da6 <_malloc_r+0xf2>
 8001cfa:	f8d8 4000 	ldr.w	r4, [r8]
 8001cfe:	4626      	mov	r6, r4
 8001d00:	2e00      	cmp	r6, #0
 8001d02:	d145      	bne.n	8001d90 <_malloc_r+0xdc>
 8001d04:	2c00      	cmp	r4, #0
 8001d06:	d048      	beq.n	8001d9a <_malloc_r+0xe6>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	4631      	mov	r1, r6
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	eb04 0903 	add.w	r9, r4, r3
 8001d12:	f000 fb61 	bl	80023d8 <_sbrk_r>
 8001d16:	4581      	cmp	r9, r0
 8001d18:	d13f      	bne.n	8001d9a <_malloc_r+0xe6>
 8001d1a:	6821      	ldr	r1, [r4, #0]
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	1a6d      	subs	r5, r5, r1
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7ff ffa7 	bl	8001c74 <sbrk_aligned>
 8001d26:	3001      	adds	r0, #1
 8001d28:	d037      	beq.n	8001d9a <_malloc_r+0xe6>
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	442b      	add	r3, r5
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	f8d8 3000 	ldr.w	r3, [r8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d038      	beq.n	8001daa <_malloc_r+0xf6>
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	42a2      	cmp	r2, r4
 8001d3c:	d12b      	bne.n	8001d96 <_malloc_r+0xe2>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e00f      	b.n	8001d64 <_malloc_r+0xb0>
 8001d44:	6822      	ldr	r2, [r4, #0]
 8001d46:	1b52      	subs	r2, r2, r5
 8001d48:	d41f      	bmi.n	8001d8a <_malloc_r+0xd6>
 8001d4a:	2a0b      	cmp	r2, #11
 8001d4c:	d917      	bls.n	8001d7e <_malloc_r+0xca>
 8001d4e:	1961      	adds	r1, r4, r5
 8001d50:	42a3      	cmp	r3, r4
 8001d52:	6025      	str	r5, [r4, #0]
 8001d54:	bf18      	it	ne
 8001d56:	6059      	strne	r1, [r3, #4]
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	bf08      	it	eq
 8001d5c:	f8c8 1000 	streq.w	r1, [r8]
 8001d60:	5162      	str	r2, [r4, r5]
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	4638      	mov	r0, r7
 8001d66:	f104 060b 	add.w	r6, r4, #11
 8001d6a:	f000 f829 	bl	8001dc0 <__malloc_unlock>
 8001d6e:	f026 0607 	bic.w	r6, r6, #7
 8001d72:	1d23      	adds	r3, r4, #4
 8001d74:	1af2      	subs	r2, r6, r3
 8001d76:	d0ae      	beq.n	8001cd6 <_malloc_r+0x22>
 8001d78:	1b9b      	subs	r3, r3, r6
 8001d7a:	50a3      	str	r3, [r4, r2]
 8001d7c:	e7ab      	b.n	8001cd6 <_malloc_r+0x22>
 8001d7e:	42a3      	cmp	r3, r4
 8001d80:	6862      	ldr	r2, [r4, #4]
 8001d82:	d1dd      	bne.n	8001d40 <_malloc_r+0x8c>
 8001d84:	f8c8 2000 	str.w	r2, [r8]
 8001d88:	e7ec      	b.n	8001d64 <_malloc_r+0xb0>
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	6864      	ldr	r4, [r4, #4]
 8001d8e:	e7ac      	b.n	8001cea <_malloc_r+0x36>
 8001d90:	4634      	mov	r4, r6
 8001d92:	6876      	ldr	r6, [r6, #4]
 8001d94:	e7b4      	b.n	8001d00 <_malloc_r+0x4c>
 8001d96:	4613      	mov	r3, r2
 8001d98:	e7cc      	b.n	8001d34 <_malloc_r+0x80>
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	f000 f80e 	bl	8001dc0 <__malloc_unlock>
 8001da4:	e797      	b.n	8001cd6 <_malloc_r+0x22>
 8001da6:	6025      	str	r5, [r4, #0]
 8001da8:	e7dc      	b.n	8001d64 <_malloc_r+0xb0>
 8001daa:	605b      	str	r3, [r3, #4]
 8001dac:	deff      	udf	#255	; 0xff
 8001dae:	bf00      	nop
 8001db0:	2000034c 	.word	0x2000034c

08001db4 <__malloc_lock>:
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <__malloc_lock+0x8>)
 8001db6:	f7ff bf13 	b.w	8001be0 <__retarget_lock_acquire_recursive>
 8001dba:	bf00      	nop
 8001dbc:	20000348 	.word	0x20000348

08001dc0 <__malloc_unlock>:
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <__malloc_unlock+0x8>)
 8001dc2:	f7ff bf0e 	b.w	8001be2 <__retarget_lock_release_recursive>
 8001dc6:	bf00      	nop
 8001dc8:	20000348 	.word	0x20000348

08001dcc <__ssputs_r>:
 8001dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd0:	461f      	mov	r7, r3
 8001dd2:	688e      	ldr	r6, [r1, #8]
 8001dd4:	4682      	mov	sl, r0
 8001dd6:	42be      	cmp	r6, r7
 8001dd8:	460c      	mov	r4, r1
 8001dda:	4690      	mov	r8, r2
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	d82c      	bhi.n	8001e3a <__ssputs_r+0x6e>
 8001de0:	898a      	ldrh	r2, [r1, #12]
 8001de2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001de6:	d026      	beq.n	8001e36 <__ssputs_r+0x6a>
 8001de8:	6965      	ldr	r5, [r4, #20]
 8001dea:	6909      	ldr	r1, [r1, #16]
 8001dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001df0:	eba3 0901 	sub.w	r9, r3, r1
 8001df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001df8:	1c7b      	adds	r3, r7, #1
 8001dfa:	444b      	add	r3, r9
 8001dfc:	106d      	asrs	r5, r5, #1
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	bf38      	it	cc
 8001e02:	461d      	movcc	r5, r3
 8001e04:	0553      	lsls	r3, r2, #21
 8001e06:	d527      	bpl.n	8001e58 <__ssputs_r+0x8c>
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7ff ff53 	bl	8001cb4 <_malloc_r>
 8001e0e:	4606      	mov	r6, r0
 8001e10:	b360      	cbz	r0, 8001e6c <__ssputs_r+0xa0>
 8001e12:	464a      	mov	r2, r9
 8001e14:	6921      	ldr	r1, [r4, #16]
 8001e16:	f000 fafd 	bl	8002414 <memcpy>
 8001e1a:	89a3      	ldrh	r3, [r4, #12]
 8001e1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	6126      	str	r6, [r4, #16]
 8001e28:	444e      	add	r6, r9
 8001e2a:	6026      	str	r6, [r4, #0]
 8001e2c:	463e      	mov	r6, r7
 8001e2e:	6165      	str	r5, [r4, #20]
 8001e30:	eba5 0509 	sub.w	r5, r5, r9
 8001e34:	60a5      	str	r5, [r4, #8]
 8001e36:	42be      	cmp	r6, r7
 8001e38:	d900      	bls.n	8001e3c <__ssputs_r+0x70>
 8001e3a:	463e      	mov	r6, r7
 8001e3c:	4632      	mov	r2, r6
 8001e3e:	4641      	mov	r1, r8
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f000 faaf 	bl	80023a4 <memmove>
 8001e46:	2000      	movs	r0, #0
 8001e48:	68a3      	ldr	r3, [r4, #8]
 8001e4a:	1b9b      	subs	r3, r3, r6
 8001e4c:	60a3      	str	r3, [r4, #8]
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	4433      	add	r3, r6
 8001e52:	6023      	str	r3, [r4, #0]
 8001e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e58:	462a      	mov	r2, r5
 8001e5a:	f000 fae9 	bl	8002430 <_realloc_r>
 8001e5e:	4606      	mov	r6, r0
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d1e0      	bne.n	8001e26 <__ssputs_r+0x5a>
 8001e64:	4650      	mov	r0, sl
 8001e66:	6921      	ldr	r1, [r4, #16]
 8001e68:	f7ff febc 	bl	8001be4 <_free_r>
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	f8ca 3000 	str.w	r3, [sl]
 8001e72:	89a3      	ldrh	r3, [r4, #12]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e7c:	81a3      	strh	r3, [r4, #12]
 8001e7e:	e7e9      	b.n	8001e54 <__ssputs_r+0x88>

08001e80 <_svfiprintf_r>:
 8001e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e84:	4698      	mov	r8, r3
 8001e86:	898b      	ldrh	r3, [r1, #12]
 8001e88:	4607      	mov	r7, r0
 8001e8a:	061b      	lsls	r3, r3, #24
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	4614      	mov	r4, r2
 8001e90:	b09d      	sub	sp, #116	; 0x74
 8001e92:	d50e      	bpl.n	8001eb2 <_svfiprintf_r+0x32>
 8001e94:	690b      	ldr	r3, [r1, #16]
 8001e96:	b963      	cbnz	r3, 8001eb2 <_svfiprintf_r+0x32>
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	f7ff ff0b 	bl	8001cb4 <_malloc_r>
 8001e9e:	6028      	str	r0, [r5, #0]
 8001ea0:	6128      	str	r0, [r5, #16]
 8001ea2:	b920      	cbnz	r0, 8001eae <_svfiprintf_r+0x2e>
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	e0d0      	b.n	8002050 <_svfiprintf_r+0x1d0>
 8001eae:	2340      	movs	r3, #64	; 0x40
 8001eb0:	616b      	str	r3, [r5, #20]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ebc:	2330      	movs	r3, #48	; 0x30
 8001ebe:	f04f 0901 	mov.w	r9, #1
 8001ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ec6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002068 <_svfiprintf_r+0x1e8>
 8001eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ece:	4623      	mov	r3, r4
 8001ed0:	469a      	mov	sl, r3
 8001ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ed6:	b10a      	cbz	r2, 8001edc <_svfiprintf_r+0x5c>
 8001ed8:	2a25      	cmp	r2, #37	; 0x25
 8001eda:	d1f9      	bne.n	8001ed0 <_svfiprintf_r+0x50>
 8001edc:	ebba 0b04 	subs.w	fp, sl, r4
 8001ee0:	d00b      	beq.n	8001efa <_svfiprintf_r+0x7a>
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4638      	mov	r0, r7
 8001eea:	f7ff ff6f 	bl	8001dcc <__ssputs_r>
 8001eee:	3001      	adds	r0, #1
 8001ef0:	f000 80a9 	beq.w	8002046 <_svfiprintf_r+0x1c6>
 8001ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ef6:	445a      	add	r2, fp
 8001ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8001efa:	f89a 3000 	ldrb.w	r3, [sl]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a1 	beq.w	8002046 <_svfiprintf_r+0x1c6>
 8001f04:	2300      	movs	r3, #0
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f0e:	f10a 0a01 	add.w	sl, sl, #1
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	9307      	str	r3, [sp, #28]
 8001f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f1c:	4654      	mov	r4, sl
 8001f1e:	2205      	movs	r2, #5
 8001f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f24:	4850      	ldr	r0, [pc, #320]	; (8002068 <_svfiprintf_r+0x1e8>)
 8001f26:	f000 fa67 	bl	80023f8 <memchr>
 8001f2a:	9a04      	ldr	r2, [sp, #16]
 8001f2c:	b9d8      	cbnz	r0, 8001f66 <_svfiprintf_r+0xe6>
 8001f2e:	06d0      	lsls	r0, r2, #27
 8001f30:	bf44      	itt	mi
 8001f32:	2320      	movmi	r3, #32
 8001f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f38:	0711      	lsls	r1, r2, #28
 8001f3a:	bf44      	itt	mi
 8001f3c:	232b      	movmi	r3, #43	; 0x2b
 8001f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f42:	f89a 3000 	ldrb.w	r3, [sl]
 8001f46:	2b2a      	cmp	r3, #42	; 0x2a
 8001f48:	d015      	beq.n	8001f76 <_svfiprintf_r+0xf6>
 8001f4a:	4654      	mov	r4, sl
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f04f 0c0a 	mov.w	ip, #10
 8001f52:	9a07      	ldr	r2, [sp, #28]
 8001f54:	4621      	mov	r1, r4
 8001f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f5a:	3b30      	subs	r3, #48	; 0x30
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d94d      	bls.n	8001ffc <_svfiprintf_r+0x17c>
 8001f60:	b1b0      	cbz	r0, 8001f90 <_svfiprintf_r+0x110>
 8001f62:	9207      	str	r2, [sp, #28]
 8001f64:	e014      	b.n	8001f90 <_svfiprintf_r+0x110>
 8001f66:	eba0 0308 	sub.w	r3, r0, r8
 8001f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	46a2      	mov	sl, r4
 8001f72:	9304      	str	r3, [sp, #16]
 8001f74:	e7d2      	b.n	8001f1c <_svfiprintf_r+0x9c>
 8001f76:	9b03      	ldr	r3, [sp, #12]
 8001f78:	1d19      	adds	r1, r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	9103      	str	r1, [sp, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bfbb      	ittet	lt
 8001f82:	425b      	neglt	r3, r3
 8001f84:	f042 0202 	orrlt.w	r2, r2, #2
 8001f88:	9307      	strge	r3, [sp, #28]
 8001f8a:	9307      	strlt	r3, [sp, #28]
 8001f8c:	bfb8      	it	lt
 8001f8e:	9204      	strlt	r2, [sp, #16]
 8001f90:	7823      	ldrb	r3, [r4, #0]
 8001f92:	2b2e      	cmp	r3, #46	; 0x2e
 8001f94:	d10c      	bne.n	8001fb0 <_svfiprintf_r+0x130>
 8001f96:	7863      	ldrb	r3, [r4, #1]
 8001f98:	2b2a      	cmp	r3, #42	; 0x2a
 8001f9a:	d134      	bne.n	8002006 <_svfiprintf_r+0x186>
 8001f9c:	9b03      	ldr	r3, [sp, #12]
 8001f9e:	3402      	adds	r4, #2
 8001fa0:	1d1a      	adds	r2, r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	9203      	str	r2, [sp, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bfb8      	it	lt
 8001faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fae:	9305      	str	r3, [sp, #20]
 8001fb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800206c <_svfiprintf_r+0x1ec>
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4650      	mov	r0, sl
 8001fb8:	7821      	ldrb	r1, [r4, #0]
 8001fba:	f000 fa1d 	bl	80023f8 <memchr>
 8001fbe:	b138      	cbz	r0, 8001fd0 <_svfiprintf_r+0x150>
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	9b04      	ldr	r3, [sp, #16]
 8001fc4:	eba0 000a 	sub.w	r0, r0, sl
 8001fc8:	4082      	lsls	r2, r0
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	3401      	adds	r4, #1
 8001fce:	9304      	str	r3, [sp, #16]
 8001fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	4826      	ldr	r0, [pc, #152]	; (8002070 <_svfiprintf_r+0x1f0>)
 8001fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fdc:	f000 fa0c 	bl	80023f8 <memchr>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	d038      	beq.n	8002056 <_svfiprintf_r+0x1d6>
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <_svfiprintf_r+0x1f4>)
 8001fe6:	bb1b      	cbnz	r3, 8002030 <_svfiprintf_r+0x1b0>
 8001fe8:	9b03      	ldr	r3, [sp, #12]
 8001fea:	3307      	adds	r3, #7
 8001fec:	f023 0307 	bic.w	r3, r3, #7
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	9303      	str	r3, [sp, #12]
 8001ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ff6:	4433      	add	r3, r6
 8001ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8001ffa:	e768      	b.n	8001ece <_svfiprintf_r+0x4e>
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	2001      	movs	r0, #1
 8002000:	fb0c 3202 	mla	r2, ip, r2, r3
 8002004:	e7a6      	b.n	8001f54 <_svfiprintf_r+0xd4>
 8002006:	2300      	movs	r3, #0
 8002008:	f04f 0c0a 	mov.w	ip, #10
 800200c:	4619      	mov	r1, r3
 800200e:	3401      	adds	r4, #1
 8002010:	9305      	str	r3, [sp, #20]
 8002012:	4620      	mov	r0, r4
 8002014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002018:	3a30      	subs	r2, #48	; 0x30
 800201a:	2a09      	cmp	r2, #9
 800201c:	d903      	bls.n	8002026 <_svfiprintf_r+0x1a6>
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0c6      	beq.n	8001fb0 <_svfiprintf_r+0x130>
 8002022:	9105      	str	r1, [sp, #20]
 8002024:	e7c4      	b.n	8001fb0 <_svfiprintf_r+0x130>
 8002026:	4604      	mov	r4, r0
 8002028:	2301      	movs	r3, #1
 800202a:	fb0c 2101 	mla	r1, ip, r1, r2
 800202e:	e7f0      	b.n	8002012 <_svfiprintf_r+0x192>
 8002030:	ab03      	add	r3, sp, #12
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	462a      	mov	r2, r5
 8002036:	4638      	mov	r0, r7
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <_svfiprintf_r+0x1f8>)
 800203a:	a904      	add	r1, sp, #16
 800203c:	f3af 8000 	nop.w
 8002040:	1c42      	adds	r2, r0, #1
 8002042:	4606      	mov	r6, r0
 8002044:	d1d6      	bne.n	8001ff4 <_svfiprintf_r+0x174>
 8002046:	89ab      	ldrh	r3, [r5, #12]
 8002048:	065b      	lsls	r3, r3, #25
 800204a:	f53f af2d 	bmi.w	8001ea8 <_svfiprintf_r+0x28>
 800204e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002050:	b01d      	add	sp, #116	; 0x74
 8002052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002056:	ab03      	add	r3, sp, #12
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	462a      	mov	r2, r5
 800205c:	4638      	mov	r0, r7
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <_svfiprintf_r+0x1f8>)
 8002060:	a904      	add	r1, sp, #16
 8002062:	f000 f87d 	bl	8002160 <_printf_i>
 8002066:	e7eb      	b.n	8002040 <_svfiprintf_r+0x1c0>
 8002068:	08002a5e 	.word	0x08002a5e
 800206c:	08002a64 	.word	0x08002a64
 8002070:	08002a68 	.word	0x08002a68
 8002074:	00000000 	.word	0x00000000
 8002078:	08001dcd 	.word	0x08001dcd

0800207c <_printf_common>:
 800207c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002080:	4616      	mov	r6, r2
 8002082:	4699      	mov	r9, r3
 8002084:	688a      	ldr	r2, [r1, #8]
 8002086:	690b      	ldr	r3, [r1, #16]
 8002088:	4607      	mov	r7, r0
 800208a:	4293      	cmp	r3, r2
 800208c:	bfb8      	it	lt
 800208e:	4613      	movlt	r3, r2
 8002090:	6033      	str	r3, [r6, #0]
 8002092:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002096:	460c      	mov	r4, r1
 8002098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800209c:	b10a      	cbz	r2, 80020a2 <_printf_common+0x26>
 800209e:	3301      	adds	r3, #1
 80020a0:	6033      	str	r3, [r6, #0]
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	0699      	lsls	r1, r3, #26
 80020a6:	bf42      	ittt	mi
 80020a8:	6833      	ldrmi	r3, [r6, #0]
 80020aa:	3302      	addmi	r3, #2
 80020ac:	6033      	strmi	r3, [r6, #0]
 80020ae:	6825      	ldr	r5, [r4, #0]
 80020b0:	f015 0506 	ands.w	r5, r5, #6
 80020b4:	d106      	bne.n	80020c4 <_printf_common+0x48>
 80020b6:	f104 0a19 	add.w	sl, r4, #25
 80020ba:	68e3      	ldr	r3, [r4, #12]
 80020bc:	6832      	ldr	r2, [r6, #0]
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	42ab      	cmp	r3, r5
 80020c2:	dc2b      	bgt.n	800211c <_printf_common+0xa0>
 80020c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020c8:	1e13      	subs	r3, r2, #0
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	bf18      	it	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	0692      	lsls	r2, r2, #26
 80020d2:	d430      	bmi.n	8002136 <_printf_common+0xba>
 80020d4:	4649      	mov	r1, r9
 80020d6:	4638      	mov	r0, r7
 80020d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020dc:	47c0      	blx	r8
 80020de:	3001      	adds	r0, #1
 80020e0:	d023      	beq.n	800212a <_printf_common+0xae>
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	6922      	ldr	r2, [r4, #16]
 80020e6:	f003 0306 	and.w	r3, r3, #6
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf14      	ite	ne
 80020ee:	2500      	movne	r5, #0
 80020f0:	6833      	ldreq	r3, [r6, #0]
 80020f2:	f04f 0600 	mov.w	r6, #0
 80020f6:	bf08      	it	eq
 80020f8:	68e5      	ldreq	r5, [r4, #12]
 80020fa:	f104 041a 	add.w	r4, r4, #26
 80020fe:	bf08      	it	eq
 8002100:	1aed      	subeq	r5, r5, r3
 8002102:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002106:	bf08      	it	eq
 8002108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800210c:	4293      	cmp	r3, r2
 800210e:	bfc4      	itt	gt
 8002110:	1a9b      	subgt	r3, r3, r2
 8002112:	18ed      	addgt	r5, r5, r3
 8002114:	42b5      	cmp	r5, r6
 8002116:	d11a      	bne.n	800214e <_printf_common+0xd2>
 8002118:	2000      	movs	r0, #0
 800211a:	e008      	b.n	800212e <_printf_common+0xb2>
 800211c:	2301      	movs	r3, #1
 800211e:	4652      	mov	r2, sl
 8002120:	4649      	mov	r1, r9
 8002122:	4638      	mov	r0, r7
 8002124:	47c0      	blx	r8
 8002126:	3001      	adds	r0, #1
 8002128:	d103      	bne.n	8002132 <_printf_common+0xb6>
 800212a:	f04f 30ff 	mov.w	r0, #4294967295
 800212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002132:	3501      	adds	r5, #1
 8002134:	e7c1      	b.n	80020ba <_printf_common+0x3e>
 8002136:	2030      	movs	r0, #48	; 0x30
 8002138:	18e1      	adds	r1, r4, r3
 800213a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002144:	4422      	add	r2, r4
 8002146:	3302      	adds	r3, #2
 8002148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800214c:	e7c2      	b.n	80020d4 <_printf_common+0x58>
 800214e:	2301      	movs	r3, #1
 8002150:	4622      	mov	r2, r4
 8002152:	4649      	mov	r1, r9
 8002154:	4638      	mov	r0, r7
 8002156:	47c0      	blx	r8
 8002158:	3001      	adds	r0, #1
 800215a:	d0e6      	beq.n	800212a <_printf_common+0xae>
 800215c:	3601      	adds	r6, #1
 800215e:	e7d9      	b.n	8002114 <_printf_common+0x98>

08002160 <_printf_i>:
 8002160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002164:	7e0f      	ldrb	r7, [r1, #24]
 8002166:	4691      	mov	r9, r2
 8002168:	2f78      	cmp	r7, #120	; 0x78
 800216a:	4680      	mov	r8, r0
 800216c:	460c      	mov	r4, r1
 800216e:	469a      	mov	sl, r3
 8002170:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002176:	d807      	bhi.n	8002188 <_printf_i+0x28>
 8002178:	2f62      	cmp	r7, #98	; 0x62
 800217a:	d80a      	bhi.n	8002192 <_printf_i+0x32>
 800217c:	2f00      	cmp	r7, #0
 800217e:	f000 80d5 	beq.w	800232c <_printf_i+0x1cc>
 8002182:	2f58      	cmp	r7, #88	; 0x58
 8002184:	f000 80c1 	beq.w	800230a <_printf_i+0x1aa>
 8002188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800218c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002190:	e03a      	b.n	8002208 <_printf_i+0xa8>
 8002192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002196:	2b15      	cmp	r3, #21
 8002198:	d8f6      	bhi.n	8002188 <_printf_i+0x28>
 800219a:	a101      	add	r1, pc, #4	; (adr r1, 80021a0 <_printf_i+0x40>)
 800219c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021a0:	080021f9 	.word	0x080021f9
 80021a4:	0800220d 	.word	0x0800220d
 80021a8:	08002189 	.word	0x08002189
 80021ac:	08002189 	.word	0x08002189
 80021b0:	08002189 	.word	0x08002189
 80021b4:	08002189 	.word	0x08002189
 80021b8:	0800220d 	.word	0x0800220d
 80021bc:	08002189 	.word	0x08002189
 80021c0:	08002189 	.word	0x08002189
 80021c4:	08002189 	.word	0x08002189
 80021c8:	08002189 	.word	0x08002189
 80021cc:	08002313 	.word	0x08002313
 80021d0:	08002239 	.word	0x08002239
 80021d4:	080022cd 	.word	0x080022cd
 80021d8:	08002189 	.word	0x08002189
 80021dc:	08002189 	.word	0x08002189
 80021e0:	08002335 	.word	0x08002335
 80021e4:	08002189 	.word	0x08002189
 80021e8:	08002239 	.word	0x08002239
 80021ec:	08002189 	.word	0x08002189
 80021f0:	08002189 	.word	0x08002189
 80021f4:	080022d5 	.word	0x080022d5
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	1d1a      	adds	r2, r3, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	602a      	str	r2, [r5, #0]
 8002200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002208:	2301      	movs	r3, #1
 800220a:	e0a0      	b.n	800234e <_printf_i+0x1ee>
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	0607      	lsls	r7, r0, #24
 8002212:	f103 0104 	add.w	r1, r3, #4
 8002216:	6029      	str	r1, [r5, #0]
 8002218:	d501      	bpl.n	800221e <_printf_i+0xbe>
 800221a:	681e      	ldr	r6, [r3, #0]
 800221c:	e003      	b.n	8002226 <_printf_i+0xc6>
 800221e:	0646      	lsls	r6, r0, #25
 8002220:	d5fb      	bpl.n	800221a <_printf_i+0xba>
 8002222:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002226:	2e00      	cmp	r6, #0
 8002228:	da03      	bge.n	8002232 <_printf_i+0xd2>
 800222a:	232d      	movs	r3, #45	; 0x2d
 800222c:	4276      	negs	r6, r6
 800222e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002232:	230a      	movs	r3, #10
 8002234:	4859      	ldr	r0, [pc, #356]	; (800239c <_printf_i+0x23c>)
 8002236:	e012      	b.n	800225e <_printf_i+0xfe>
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	1d19      	adds	r1, r3, #4
 800223e:	6029      	str	r1, [r5, #0]
 8002240:	0605      	lsls	r5, r0, #24
 8002242:	d501      	bpl.n	8002248 <_printf_i+0xe8>
 8002244:	681e      	ldr	r6, [r3, #0]
 8002246:	e002      	b.n	800224e <_printf_i+0xee>
 8002248:	0641      	lsls	r1, r0, #25
 800224a:	d5fb      	bpl.n	8002244 <_printf_i+0xe4>
 800224c:	881e      	ldrh	r6, [r3, #0]
 800224e:	2f6f      	cmp	r7, #111	; 0x6f
 8002250:	bf0c      	ite	eq
 8002252:	2308      	moveq	r3, #8
 8002254:	230a      	movne	r3, #10
 8002256:	4851      	ldr	r0, [pc, #324]	; (800239c <_printf_i+0x23c>)
 8002258:	2100      	movs	r1, #0
 800225a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800225e:	6865      	ldr	r5, [r4, #4]
 8002260:	2d00      	cmp	r5, #0
 8002262:	bfa8      	it	ge
 8002264:	6821      	ldrge	r1, [r4, #0]
 8002266:	60a5      	str	r5, [r4, #8]
 8002268:	bfa4      	itt	ge
 800226a:	f021 0104 	bicge.w	r1, r1, #4
 800226e:	6021      	strge	r1, [r4, #0]
 8002270:	b90e      	cbnz	r6, 8002276 <_printf_i+0x116>
 8002272:	2d00      	cmp	r5, #0
 8002274:	d04b      	beq.n	800230e <_printf_i+0x1ae>
 8002276:	4615      	mov	r5, r2
 8002278:	fbb6 f1f3 	udiv	r1, r6, r3
 800227c:	fb03 6711 	mls	r7, r3, r1, r6
 8002280:	5dc7      	ldrb	r7, [r0, r7]
 8002282:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002286:	4637      	mov	r7, r6
 8002288:	42bb      	cmp	r3, r7
 800228a:	460e      	mov	r6, r1
 800228c:	d9f4      	bls.n	8002278 <_printf_i+0x118>
 800228e:	2b08      	cmp	r3, #8
 8002290:	d10b      	bne.n	80022aa <_printf_i+0x14a>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	07de      	lsls	r6, r3, #31
 8002296:	d508      	bpl.n	80022aa <_printf_i+0x14a>
 8002298:	6923      	ldr	r3, [r4, #16]
 800229a:	6861      	ldr	r1, [r4, #4]
 800229c:	4299      	cmp	r1, r3
 800229e:	bfde      	ittt	le
 80022a0:	2330      	movle	r3, #48	; 0x30
 80022a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022aa:	1b52      	subs	r2, r2, r5
 80022ac:	6122      	str	r2, [r4, #16]
 80022ae:	464b      	mov	r3, r9
 80022b0:	4621      	mov	r1, r4
 80022b2:	4640      	mov	r0, r8
 80022b4:	f8cd a000 	str.w	sl, [sp]
 80022b8:	aa03      	add	r2, sp, #12
 80022ba:	f7ff fedf 	bl	800207c <_printf_common>
 80022be:	3001      	adds	r0, #1
 80022c0:	d14a      	bne.n	8002358 <_printf_i+0x1f8>
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295
 80022c6:	b004      	add	sp, #16
 80022c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f043 0320 	orr.w	r3, r3, #32
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	2778      	movs	r7, #120	; 0x78
 80022d6:	4832      	ldr	r0, [pc, #200]	; (80023a0 <_printf_i+0x240>)
 80022d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	6829      	ldr	r1, [r5, #0]
 80022e0:	061f      	lsls	r7, r3, #24
 80022e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80022e6:	d402      	bmi.n	80022ee <_printf_i+0x18e>
 80022e8:	065f      	lsls	r7, r3, #25
 80022ea:	bf48      	it	mi
 80022ec:	b2b6      	uxthmi	r6, r6
 80022ee:	07df      	lsls	r7, r3, #31
 80022f0:	bf48      	it	mi
 80022f2:	f043 0320 	orrmi.w	r3, r3, #32
 80022f6:	6029      	str	r1, [r5, #0]
 80022f8:	bf48      	it	mi
 80022fa:	6023      	strmi	r3, [r4, #0]
 80022fc:	b91e      	cbnz	r6, 8002306 <_printf_i+0x1a6>
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f023 0320 	bic.w	r3, r3, #32
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	2310      	movs	r3, #16
 8002308:	e7a6      	b.n	8002258 <_printf_i+0xf8>
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <_printf_i+0x23c>)
 800230c:	e7e4      	b.n	80022d8 <_printf_i+0x178>
 800230e:	4615      	mov	r5, r2
 8002310:	e7bd      	b.n	800228e <_printf_i+0x12e>
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	6826      	ldr	r6, [r4, #0]
 8002316:	1d18      	adds	r0, r3, #4
 8002318:	6961      	ldr	r1, [r4, #20]
 800231a:	6028      	str	r0, [r5, #0]
 800231c:	0635      	lsls	r5, r6, #24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	d501      	bpl.n	8002326 <_printf_i+0x1c6>
 8002322:	6019      	str	r1, [r3, #0]
 8002324:	e002      	b.n	800232c <_printf_i+0x1cc>
 8002326:	0670      	lsls	r0, r6, #25
 8002328:	d5fb      	bpl.n	8002322 <_printf_i+0x1c2>
 800232a:	8019      	strh	r1, [r3, #0]
 800232c:	2300      	movs	r3, #0
 800232e:	4615      	mov	r5, r2
 8002330:	6123      	str	r3, [r4, #16]
 8002332:	e7bc      	b.n	80022ae <_printf_i+0x14e>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	2100      	movs	r1, #0
 8002338:	1d1a      	adds	r2, r3, #4
 800233a:	602a      	str	r2, [r5, #0]
 800233c:	681d      	ldr	r5, [r3, #0]
 800233e:	6862      	ldr	r2, [r4, #4]
 8002340:	4628      	mov	r0, r5
 8002342:	f000 f859 	bl	80023f8 <memchr>
 8002346:	b108      	cbz	r0, 800234c <_printf_i+0x1ec>
 8002348:	1b40      	subs	r0, r0, r5
 800234a:	6060      	str	r0, [r4, #4]
 800234c:	6863      	ldr	r3, [r4, #4]
 800234e:	6123      	str	r3, [r4, #16]
 8002350:	2300      	movs	r3, #0
 8002352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002356:	e7aa      	b.n	80022ae <_printf_i+0x14e>
 8002358:	462a      	mov	r2, r5
 800235a:	4649      	mov	r1, r9
 800235c:	4640      	mov	r0, r8
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	47d0      	blx	sl
 8002362:	3001      	adds	r0, #1
 8002364:	d0ad      	beq.n	80022c2 <_printf_i+0x162>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	079b      	lsls	r3, r3, #30
 800236a:	d413      	bmi.n	8002394 <_printf_i+0x234>
 800236c:	68e0      	ldr	r0, [r4, #12]
 800236e:	9b03      	ldr	r3, [sp, #12]
 8002370:	4298      	cmp	r0, r3
 8002372:	bfb8      	it	lt
 8002374:	4618      	movlt	r0, r3
 8002376:	e7a6      	b.n	80022c6 <_printf_i+0x166>
 8002378:	2301      	movs	r3, #1
 800237a:	4632      	mov	r2, r6
 800237c:	4649      	mov	r1, r9
 800237e:	4640      	mov	r0, r8
 8002380:	47d0      	blx	sl
 8002382:	3001      	adds	r0, #1
 8002384:	d09d      	beq.n	80022c2 <_printf_i+0x162>
 8002386:	3501      	adds	r5, #1
 8002388:	68e3      	ldr	r3, [r4, #12]
 800238a:	9903      	ldr	r1, [sp, #12]
 800238c:	1a5b      	subs	r3, r3, r1
 800238e:	42ab      	cmp	r3, r5
 8002390:	dcf2      	bgt.n	8002378 <_printf_i+0x218>
 8002392:	e7eb      	b.n	800236c <_printf_i+0x20c>
 8002394:	2500      	movs	r5, #0
 8002396:	f104 0619 	add.w	r6, r4, #25
 800239a:	e7f5      	b.n	8002388 <_printf_i+0x228>
 800239c:	08002a6f 	.word	0x08002a6f
 80023a0:	08002a80 	.word	0x08002a80

080023a4 <memmove>:
 80023a4:	4288      	cmp	r0, r1
 80023a6:	b510      	push	{r4, lr}
 80023a8:	eb01 0402 	add.w	r4, r1, r2
 80023ac:	d902      	bls.n	80023b4 <memmove+0x10>
 80023ae:	4284      	cmp	r4, r0
 80023b0:	4623      	mov	r3, r4
 80023b2:	d807      	bhi.n	80023c4 <memmove+0x20>
 80023b4:	1e43      	subs	r3, r0, #1
 80023b6:	42a1      	cmp	r1, r4
 80023b8:	d008      	beq.n	80023cc <memmove+0x28>
 80023ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023c2:	e7f8      	b.n	80023b6 <memmove+0x12>
 80023c4:	4601      	mov	r1, r0
 80023c6:	4402      	add	r2, r0
 80023c8:	428a      	cmp	r2, r1
 80023ca:	d100      	bne.n	80023ce <memmove+0x2a>
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80023d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80023d6:	e7f7      	b.n	80023c8 <memmove+0x24>

080023d8 <_sbrk_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	2300      	movs	r3, #0
 80023dc:	4d05      	ldr	r5, [pc, #20]	; (80023f4 <_sbrk_r+0x1c>)
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f7fe fb4e 	bl	8000a84 <_sbrk>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d102      	bne.n	80023f2 <_sbrk_r+0x1a>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	b103      	cbz	r3, 80023f2 <_sbrk_r+0x1a>
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	20000344 	.word	0x20000344

080023f8 <memchr>:
 80023f8:	4603      	mov	r3, r0
 80023fa:	b510      	push	{r4, lr}
 80023fc:	b2c9      	uxtb	r1, r1
 80023fe:	4402      	add	r2, r0
 8002400:	4293      	cmp	r3, r2
 8002402:	4618      	mov	r0, r3
 8002404:	d101      	bne.n	800240a <memchr+0x12>
 8002406:	2000      	movs	r0, #0
 8002408:	e003      	b.n	8002412 <memchr+0x1a>
 800240a:	7804      	ldrb	r4, [r0, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	428c      	cmp	r4, r1
 8002410:	d1f6      	bne.n	8002400 <memchr+0x8>
 8002412:	bd10      	pop	{r4, pc}

08002414 <memcpy>:
 8002414:	440a      	add	r2, r1
 8002416:	4291      	cmp	r1, r2
 8002418:	f100 33ff 	add.w	r3, r0, #4294967295
 800241c:	d100      	bne.n	8002420 <memcpy+0xc>
 800241e:	4770      	bx	lr
 8002420:	b510      	push	{r4, lr}
 8002422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002426:	4291      	cmp	r1, r2
 8002428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800242c:	d1f9      	bne.n	8002422 <memcpy+0xe>
 800242e:	bd10      	pop	{r4, pc}

08002430 <_realloc_r>:
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002434:	4680      	mov	r8, r0
 8002436:	4614      	mov	r4, r2
 8002438:	460e      	mov	r6, r1
 800243a:	b921      	cbnz	r1, 8002446 <_realloc_r+0x16>
 800243c:	4611      	mov	r1, r2
 800243e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002442:	f7ff bc37 	b.w	8001cb4 <_malloc_r>
 8002446:	b92a      	cbnz	r2, 8002454 <_realloc_r+0x24>
 8002448:	f7ff fbcc 	bl	8001be4 <_free_r>
 800244c:	4625      	mov	r5, r4
 800244e:	4628      	mov	r0, r5
 8002450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002454:	f000 f81b 	bl	800248e <_malloc_usable_size_r>
 8002458:	4284      	cmp	r4, r0
 800245a:	4607      	mov	r7, r0
 800245c:	d802      	bhi.n	8002464 <_realloc_r+0x34>
 800245e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002462:	d812      	bhi.n	800248a <_realloc_r+0x5a>
 8002464:	4621      	mov	r1, r4
 8002466:	4640      	mov	r0, r8
 8002468:	f7ff fc24 	bl	8001cb4 <_malloc_r>
 800246c:	4605      	mov	r5, r0
 800246e:	2800      	cmp	r0, #0
 8002470:	d0ed      	beq.n	800244e <_realloc_r+0x1e>
 8002472:	42bc      	cmp	r4, r7
 8002474:	4622      	mov	r2, r4
 8002476:	4631      	mov	r1, r6
 8002478:	bf28      	it	cs
 800247a:	463a      	movcs	r2, r7
 800247c:	f7ff ffca 	bl	8002414 <memcpy>
 8002480:	4631      	mov	r1, r6
 8002482:	4640      	mov	r0, r8
 8002484:	f7ff fbae 	bl	8001be4 <_free_r>
 8002488:	e7e1      	b.n	800244e <_realloc_r+0x1e>
 800248a:	4635      	mov	r5, r6
 800248c:	e7df      	b.n	800244e <_realloc_r+0x1e>

0800248e <_malloc_usable_size_r>:
 800248e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002492:	1f18      	subs	r0, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	bfbc      	itt	lt
 8002498:	580b      	ldrlt	r3, [r1, r0]
 800249a:	18c0      	addlt	r0, r0, r3
 800249c:	4770      	bx	lr
	...

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
